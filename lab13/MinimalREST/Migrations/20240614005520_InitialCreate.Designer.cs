// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MinimalREST.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("20240614005520_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApparatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApparatusSensorType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApparatusTubeType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApparatusVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("CalibrationFunction")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("HitsNumer")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Temperature")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Measurement");
                });
#pragma warning restore 612, 618
        }
    }
}
